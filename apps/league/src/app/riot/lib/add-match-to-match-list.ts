import {Matches} from "@league/api-interfaces";

export class AddMatchToMatchList {
  addMatchToMatchList(matchList: Matches[], matchInformation: {
    gameId: number; participantIdentities: ({ participantId: number; player: { profileIcon: number; accountId: string; matchHistoryUri: string; currentAccountId: string; currentPlatformId: string; summonerName: string; summonerId: string; platformId: string } } | { participantId: number; player: { profileIcon: number; accountId: string; matchHistoryUri: string; currentAccountId: string; currentPlatformId: string; summonerName: string; summonerId: string; platformId: string } } | { participantId: number; player: { profileIcon: number; accountId: string; matchHistoryUri: string; currentAccountId: string; currentPlatformId: string; summonerName: string; summonerId: string; platformId: string } } | { participantId: number; player: { profileIcon: number; accountId: string; matchHistoryUri: string; currentAccountId: string; currentPlatformId: string; summonerName: string; summonerId: string; platformId: string } } | { participantId: number; player: { profileIcon: number; accountId: string; matchHistoryUri: string; currentAccountId: string; currentPlatformId: string; summonerName: string; summonerId: string; platformId: string } } | { participantId: number; player: { profileIcon: number; accountId: string; matchHistoryUri: string; currentAccountId: string; currentPlatformId: string; summonerName: string; summonerId: string; platformId: string } } | { participantId: number; player: { profileIcon: number; accountId: string; matchHistoryUri: string; currentAccountId: string; currentPlatformId: string; summonerName: string; summonerId: string; platformId: string } } | { participantId: number; player: { profileIcon: number; accountId: string; matchHistoryUri: string; currentAccountId: string; currentPlatformId: string; summonerName: string; summonerId: string; platformId: string } } | { participantId: number; player: { profileIcon: number; accountId: string; matchHistoryUri: string; currentAccountId: string; currentPlatformId: string; summonerName: string; summonerId: string; platformId: string } } | { participantId: number; player: { profileIcon: number; accountId: string; matchHistoryUri: string; currentAccountId: string; currentPlatformId: string; summonerName: string; summonerId: string; platformId: string } })[]; queueId: number; gameType: string; gameDuration: number; teams: ({ towerKills: number; riftHeraldKills: number; firstBlood: boolean; inhibitorKills: number; bans: any[]; firstBaron: boolean; firstDragon: boolean; dominionVictoryScore: number; dragonKills: number; baronKills: number; firstInhibitor: boolean; firstTower: boolean; vilemawKills: number; firstRiftHerald: boolean; teamId: number; win: string } | { towerKills: number; riftHeraldKills: number; firstBlood: boolean; inhibitorKills: number; bans: any[]; firstBaron: boolean; firstDragon: boolean; dominionVictoryScore: number; dragonKills: number; baronKills: number; firstInhibitor: boolean; firstTower: boolean; vilemawKills: number; firstRiftHerald: boolean; teamId: number; win: string })[]; platformId: string; gameCreation: number; seasonId: number; gameVersion: string; mapId: number; gameMode: string; participants: ({
      participantId: number; championId: number; stats: {
        totalUnitsHealed: number; largestMultiKill: number; firstInhibitorKill: boolean; totalPlayerScore: number; damageDealtToObjectives: number; playerScore0: number; deaths: number; magicDamageDealtToChampions: number; playerScore7: number; perkSubStyle: number; playerScore8: number; pentaKills: number; playerScore5: number; playerScore6: number; playerScore3: number; playerScore4: number; playerScore1: number; totalTimeCrowdControlDealt: number; playerScore2: number; firstTowerKill: boolean; playerScore9: number; perk1Var3: number; perk1Var2: number; totalScoreRank: number; perk1Var1: number; totalDamageDealt: number; largestKillingSpree: number; totalDamageDealtToChampions: number; firstInhibitorAssist: boolean; objectivePlayerScore: number; inhibitorKills: number; perk3Var3: number; perk3Var2: number; participantId: number; perk3Var1: number; goldSpent: number; perk1: number; perk0: number; perk3: number; perk2: number; perk5: number; perk4: number; unrealKills: number; perk5Var3: number; perk5Var2: number; visionScore: number; perk5Var1: number; firstBloodKill: boolean; longestTimeSpentLiving: number; killingSprees: number; sightWardsBoughtInGame: number; quadraKills: number; item4: number; item3: number; item6: number; item5: number; perkPrimaryStyle: number; item0: number; item2: number; item1: number; statPerk1: number; statPerk0: number; goldEarned: number; physicalDamageTaken: number; champLevel: number; totalDamageTaken: number; neutralMinionsKilled: number; statPerk2: number; tripleKills: number; damageSelfMitigated: number; largestCriticalStrike: number; magicDamageDealt: number; timeCCingOthers: number; magicalDamageTaken: number; physicalDamageDealtToChampions: number; perk0Var2: number; perk0Var1: number; totalMinionsKilled: number; visionWardsBoughtInGame: number; perk0Var3: number; kills: number; firstTowerAssist: boolean; perk2Var2: number; perk2Var1: number; combatPlayerScore: number; turretKills: number; trueDamageTaken: number; firstBloodAssist: boolean; assists: number; damageDealtToTurrets: number; win: boolean; totalHeal: number; perk2Var3: number; physicalDamageDealt: number; trueDamageDealtToChampions: number; doubleKills: number; trueDamageDealt: number; perk4Var2: number; perk4Var1: number; perk4Var3: number
      }; teamId: number; timeline: { participantId: number; damageTakenPerMinDeltas: { "10-20": number; "0-10": number }; role: string; xpPerMinDeltas: { "10-20": number; "0-10": number }; lane: string; creepsPerMinDeltas: { "10-20": number; "0-10": number }; goldPerMinDeltas: { "10-20": number; "0-10": number } }; spell1Id: number; spell2Id: number
    })[]
  }) {
    const index = matchList.findIndex((match) => match.gameId === matchInformation.gameId);
    return [
      ...matchList.slice(0, index),
      {
        ...matchList[index],
        matchInformation
      },
      ...matchList.slice(index+1)
    ]
  }
}
